<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="${test_name}" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="server_protocol" elementType="Argument">
            <stringProp name="Argument.name">server_protocol</stringProp>
            <stringProp name="Argument.value">${__P(server_protocol,https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="server_addr" elementType="Argument">
            <stringProp name="Argument.name">server_addr</stringProp>
            <stringProp name="Argument.value">${__P(server_addr,testnet.aurora.dev)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="server_port" elementType="Argument">
            <stringProp name="Argument.name">server_port</stringProp>
            <stringProp name="Argument.value">${__P(server_port,443)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user_token" elementType="Argument">
            <stringProp name="Argument.name">user_token</stringProp>
            <stringProp name="Argument.value">${__P(user_token,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="num_of_threads" elementType="Argument">
            <stringProp name="Argument.name">num_of_threads</stringProp>
            <stringProp name="Argument.value">${__P(num_of_threads,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ramp_up_period" elementType="Argument">
            <stringProp name="Argument.name">ramp_up_period</stringProp>
            <stringProp name="Argument.value">${__P(ramp_up_period_s,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="num_of_loop_count" elementType="Argument">
            <stringProp name="Argument.name">num_of_loop_count</stringProp>
            <stringProp name="Argument.value">${__P(num_of_loop_count,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="chain_id" elementType="Argument">
            <stringProp name="Argument.name">chain_id</stringProp>
            <stringProp name="Argument.value">${__P(chain_id,1313161555)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="private_key_from" elementType="Argument">
            <stringProp name="Argument.name">private_key_from</stringProp>
            <stringProp name="Argument.value">${__P(private_key_from)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="private_key_to" elementType="Argument">
            <stringProp name="Argument.name">private_key_to</stringProp>
            <stringProp name="Argument.value">${__P(private_key_to)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol_version" elementType="Argument">
            <stringProp name="Argument.name">protocol_version</stringProp>
            <stringProp name="Argument.value">${__P(protocol_version,0x41)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="json_rpc_version" elementType="Argument">
            <stringProp name="Argument.name">json_rpc_version</stringProp>
            <stringProp name="Argument.value">${__P(json_rpc_version,2.0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="lib_dir" elementType="Argument">
            <stringProp name="Argument.name">lib_dir</stringProp>
            <stringProp name="Argument.value">${__P(lib_dir,/opt/aurora/test-suite/lib)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tests_dir" elementType="Argument">
            <stringProp name="Argument.name">tests_dir</stringProp>
            <stringProp name="Argument.value">${__P(tests_dir,/opt/aurora/test-suite/tests)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rpc" elementType="Argument">
            <stringProp name="Argument.name">rpc</stringProp>
            <stringProp name="Argument.value">${__P(rpc,all)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="test_name" elementType="Argument">
            <stringProp name="Argument.name">test_name</stringProp>
            <stringProp name="Argument.value">${__P(test_name,LogFunctionalityTest)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="zero_data" elementType="Argument">
            <stringProp name="Argument.name">zero_data</stringProp>
            <stringProp name="Argument.value">${__P(zero_data,0x)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${server_addr}</stringProp>
        <stringProp name="HTTPSampler.port">${server_port}</stringProp>
        <stringProp name="HTTPSampler.protocol">${server_protocol}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">${user_token}</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout">60000</stringProp>
        <stringProp name="HTTPSampler.response_timeout">50000</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">accept-encoding</stringProp>
            <stringProp name="Header.value">gzip, deflate</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">content-type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="${test_name}-TG" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${num_of_loop_count}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${num_of_threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp_up_period_s}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Request Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">request_counter</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="? eth_getLogs - malformed_1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getLogs&quot;,&quot;params&quot;:[], &quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">missing required arg0</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.error.code</stringProp>
              <stringProp name="EXPECTED_VALUE">-32602</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="? eth_getLogs - malformed_2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getLogs&quot;,&quot;params&quot;:[{&quot;from&quot;: 81206675}], &quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="? eth_getLogs - malformed_3" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getLogs&quot;,&quot;params&quot;:[{81206675}], &quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.error.code</stringProp>
              <stringProp name="EXPECTED_VALUE">-32700</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="? eth_getLogs - malformed_4" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getLogs&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908&quot;}], &quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">blockhash cannot be odd length</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.error.code</stringProp>
              <stringProp name="EXPECTED_VALUE">-32602</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="? eth_getLogs - malformed_5" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getLogs&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908&quot;}], &quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">blockhash length cannot be smaller than 64</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.error.code</stringProp>
              <stringProp name="EXPECTED_VALUE">-32602</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="? eth_getLogs - malformed_6" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getLogs&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb112&quot;}], &quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">blockhash length cannot be greater than 64</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.error.code</stringProp>
              <stringProp name="EXPECTED_VALUE">-32602</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getLogs - from_to_1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getLogs&quot;,&quot;params&quot;:[{&quot;fromBlock&quot;:81206674, &quot;toBlock&quot;:81206675}], &quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">from and to are numeric</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d92&quot;,&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x50afafb746a70ef55979479c081c2367191024ef4500ddfe9952871de6f26175&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc60d2a999b8a3a4c12149cffa12ffb3d7a232758&quot;,&quot;topics&quot;:[&quot;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,&quot;0x0000000000000000000000005f802b29220c87ef83b26c959342f8db541622a9&quot;],&quot;data&quot;:&quot;0x0000000000000000000000000000000000000000000000000000000000000064&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d92&quot;,&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x50afafb746a70ef55979479c081c2367191024ef4500ddfe9952871de6f26175&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc60d2a999b8a3a4c12149cffa12ffb3d7a232758&quot;,&quot;topics&quot;:[&quot;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,&quot;0x0000000000000000000000005f802b29220c87ef83b26c959342f8db541622a9&quot;],&quot;data&quot;:&quot;0x0000000000000000000000000000000000000000000000000000000000000064&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_newFilter - from_to_1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_newFilter&quot;,&quot;params&quot;:[{&quot;fromBlock&quot;:81206674, &quot;toBlock&quot;:81206675}],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract new filter id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">newFilterId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="-501368013">&quot;result&quot;:&quot;0x</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getFilterLogs - from_to_1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getFilterLogs&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d92&quot;,&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x50afafb746a70ef55979479c081c2367191024ef4500ddfe9952871de6f26175&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc60d2a999b8a3a4c12149cffa12ffb3d7a232758&quot;,&quot;topics&quot;:[&quot;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,&quot;0x0000000000000000000000005f802b29220c87ef83b26c959342f8db541622a9&quot;],&quot;data&quot;:&quot;0x0000000000000000000000000000000000000000000000000000000000000064&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d92&quot;,&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x50afafb746a70ef55979479c081c2367191024ef4500ddfe9952871de6f26175&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc60d2a999b8a3a4c12149cffa12ffb3d7a232758&quot;,&quot;topics&quot;:[&quot;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,&quot;0x0000000000000000000000005f802b29220c87ef83b26c959342f8db541622a9&quot;],&quot;data&quot;:&quot;0x0000000000000000000000000000000000000000000000000000000000000064&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_uninstallFilter - from_to_1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_uninstallFilter&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="1639967077">&quot;result&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getLogs - from_to_2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getLogs&quot;,&quot;params&quot;:[{&quot;fromBlock&quot;:&quot;81206674&quot;, &quot;toBlock&quot;:&quot;81206675&quot;}], &quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">from and to are string - base10 </stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d92&quot;,&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x50afafb746a70ef55979479c081c2367191024ef4500ddfe9952871de6f26175&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc60d2a999b8a3a4c12149cffa12ffb3d7a232758&quot;,&quot;topics&quot;:[&quot;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,&quot;0x0000000000000000000000005f802b29220c87ef83b26c959342f8db541622a9&quot;],&quot;data&quot;:&quot;0x0000000000000000000000000000000000000000000000000000000000000064&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d92&quot;,&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x50afafb746a70ef55979479c081c2367191024ef4500ddfe9952871de6f26175&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc60d2a999b8a3a4c12149cffa12ffb3d7a232758&quot;,&quot;topics&quot;:[&quot;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,&quot;0x0000000000000000000000005f802b29220c87ef83b26c959342f8db541622a9&quot;],&quot;data&quot;:&quot;0x0000000000000000000000000000000000000000000000000000000000000064&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_newFilter - from_to_2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_newFilter&quot;,&quot;params&quot;:[{&quot;fromBlock&quot;:&quot;81206674&quot;, &quot;toBlock&quot;:&quot;81206675&quot;}],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract new filter id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">newFilterId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="-501368013">&quot;result&quot;:&quot;0x</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getFilterLogs - from_to_2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getFilterLogs&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d92&quot;,&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x50afafb746a70ef55979479c081c2367191024ef4500ddfe9952871de6f26175&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc60d2a999b8a3a4c12149cffa12ffb3d7a232758&quot;,&quot;topics&quot;:[&quot;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,&quot;0x0000000000000000000000005f802b29220c87ef83b26c959342f8db541622a9&quot;],&quot;data&quot;:&quot;0x0000000000000000000000000000000000000000000000000000000000000064&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d92&quot;,&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x50afafb746a70ef55979479c081c2367191024ef4500ddfe9952871de6f26175&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc60d2a999b8a3a4c12149cffa12ffb3d7a232758&quot;,&quot;topics&quot;:[&quot;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,&quot;0x0000000000000000000000005f802b29220c87ef83b26c959342f8db541622a9&quot;],&quot;data&quot;:&quot;0x0000000000000000000000000000000000000000000000000000000000000064&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_uninstallFilter - from_to_2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_uninstallFilter&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="1639967077">&quot;result&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getLogs - from_to_3" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getLogs&quot;,&quot;params&quot;:[{&quot;fromBlock&quot;:&quot;0x4d71d92&quot;, &quot;toBlock&quot;:&quot;0x4d71d93&quot;}], &quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">from and to are string - base16</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d92&quot;,&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x50afafb746a70ef55979479c081c2367191024ef4500ddfe9952871de6f26175&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc60d2a999b8a3a4c12149cffa12ffb3d7a232758&quot;,&quot;topics&quot;:[&quot;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,&quot;0x0000000000000000000000005f802b29220c87ef83b26c959342f8db541622a9&quot;],&quot;data&quot;:&quot;0x0000000000000000000000000000000000000000000000000000000000000064&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d92&quot;,&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x50afafb746a70ef55979479c081c2367191024ef4500ddfe9952871de6f26175&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc60d2a999b8a3a4c12149cffa12ffb3d7a232758&quot;,&quot;topics&quot;:[&quot;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,&quot;0x0000000000000000000000005f802b29220c87ef83b26c959342f8db541622a9&quot;],&quot;data&quot;:&quot;0x0000000000000000000000000000000000000000000000000000000000000064&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_newFilter - from_to_3" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_newFilter&quot;,&quot;params&quot;:[{&quot;fromBlock&quot;:&quot;0x4d71d92&quot;, &quot;toBlock&quot;:&quot;0x4d71d93&quot;}],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract new filter id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">newFilterId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="-501368013">&quot;result&quot;:&quot;0x</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getFilterLogs - from_to_3" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getFilterLogs&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d92&quot;,&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x50afafb746a70ef55979479c081c2367191024ef4500ddfe9952871de6f26175&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc60d2a999b8a3a4c12149cffa12ffb3d7a232758&quot;,&quot;topics&quot;:[&quot;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,&quot;0x0000000000000000000000005f802b29220c87ef83b26c959342f8db541622a9&quot;],&quot;data&quot;:&quot;0x0000000000000000000000000000000000000000000000000000000000000064&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d92&quot;,&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x50afafb746a70ef55979479c081c2367191024ef4500ddfe9952871de6f26175&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc60d2a999b8a3a4c12149cffa12ffb3d7a232758&quot;,&quot;topics&quot;:[&quot;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,&quot;0x0000000000000000000000005f802b29220c87ef83b26c959342f8db541622a9&quot;],&quot;data&quot;:&quot;0x0000000000000000000000000000000000000000000000000000000000000064&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_uninstallFilter - from_to_3" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_uninstallFilter&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="1639967077">&quot;result&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getLogs - hash_1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getLogs&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;}], &quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">only blockhash</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d92&quot;,&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x50afafb746a70ef55979479c081c2367191024ef4500ddfe9952871de6f26175&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc60d2a999b8a3a4c12149cffa12ffb3d7a232758&quot;,&quot;topics&quot;:[&quot;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,&quot;0x0000000000000000000000005f802b29220c87ef83b26c959342f8db541622a9&quot;],&quot;data&quot;:&quot;0x0000000000000000000000000000000000000000000000000000000000000064&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d92&quot;,&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x50afafb746a70ef55979479c081c2367191024ef4500ddfe9952871de6f26175&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc60d2a999b8a3a4c12149cffa12ffb3d7a232758&quot;,&quot;topics&quot;:[&quot;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,&quot;0x0000000000000000000000005f802b29220c87ef83b26c959342f8db541622a9&quot;],&quot;data&quot;:&quot;0x0000000000000000000000000000000000000000000000000000000000000064&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_newFilter - hash_1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_newFilter&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;}],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract new filter id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">newFilterId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="-501368013">&quot;result&quot;:&quot;0x</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getFilterLogs - hash_1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getFilterLogs&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d92&quot;,&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x50afafb746a70ef55979479c081c2367191024ef4500ddfe9952871de6f26175&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc60d2a999b8a3a4c12149cffa12ffb3d7a232758&quot;,&quot;topics&quot;:[&quot;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,&quot;0x0000000000000000000000005f802b29220c87ef83b26c959342f8db541622a9&quot;],&quot;data&quot;:&quot;0x0000000000000000000000000000000000000000000000000000000000000064&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d92&quot;,&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x50afafb746a70ef55979479c081c2367191024ef4500ddfe9952871de6f26175&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc60d2a999b8a3a4c12149cffa12ffb3d7a232758&quot;,&quot;topics&quot;:[&quot;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,&quot;0x0000000000000000000000005f802b29220c87ef83b26c959342f8db541622a9&quot;],&quot;data&quot;:&quot;0x0000000000000000000000000000000000000000000000000000000000000064&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_uninstallFilter - hash_1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_uninstallFilter&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="1639967077">&quot;result&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getLogs - hash_2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getLogs&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;, &quot;fromBlock&quot;:&quot;0x4d71d92&quot;, &quot;toBlock&quot;:&quot;0x4d71d93&quot;}], &quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">blockhash should overwrite from and to</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d92&quot;,&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x50afafb746a70ef55979479c081c2367191024ef4500ddfe9952871de6f26175&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc60d2a999b8a3a4c12149cffa12ffb3d7a232758&quot;,&quot;topics&quot;:[&quot;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,&quot;0x0000000000000000000000005f802b29220c87ef83b26c959342f8db541622a9&quot;],&quot;data&quot;:&quot;0x0000000000000000000000000000000000000000000000000000000000000064&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d92&quot;,&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x50afafb746a70ef55979479c081c2367191024ef4500ddfe9952871de6f26175&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc60d2a999b8a3a4c12149cffa12ffb3d7a232758&quot;,&quot;topics&quot;:[&quot;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,&quot;0x0000000000000000000000005f802b29220c87ef83b26c959342f8db541622a9&quot;],&quot;data&quot;:&quot;0x0000000000000000000000000000000000000000000000000000000000000064&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_newFilter - hash_2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_newFilter&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;, &quot;fromBlock&quot;:&quot;0x4d71d92&quot;, &quot;toBlock&quot;:&quot;0x4d71d93&quot;}],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract new filter id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">newFilterId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="-501368013">&quot;result&quot;:&quot;0x</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getFilterLogs - hash_2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getFilterLogs&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d92&quot;,&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x50afafb746a70ef55979479c081c2367191024ef4500ddfe9952871de6f26175&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc60d2a999b8a3a4c12149cffa12ffb3d7a232758&quot;,&quot;topics&quot;:[&quot;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,&quot;0x0000000000000000000000005f802b29220c87ef83b26c959342f8db541622a9&quot;],&quot;data&quot;:&quot;0x0000000000000000000000000000000000000000000000000000000000000064&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d92&quot;,&quot;blockHash&quot;:&quot;0x2a44cb2fe583ad811ed45ca28c267ff940e745ea18e5933d9a065fe1d9908cb1&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x50afafb746a70ef55979479c081c2367191024ef4500ddfe9952871de6f26175&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc60d2a999b8a3a4c12149cffa12ffb3d7a232758&quot;,&quot;topics&quot;:[&quot;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,&quot;0x0000000000000000000000005f802b29220c87ef83b26c959342f8db541622a9&quot;],&quot;data&quot;:&quot;0x0000000000000000000000000000000000000000000000000000000000000064&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_uninstallFilter - hash_2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_uninstallFilter&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="1639967077">&quot;result&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getLogs - addr_1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getLogs&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;, &quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;}], &quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">single address</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_newFilter - addr_1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_newFilter&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;, &quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;}],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract new filter id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">newFilterId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="-501368013">&quot;result&quot;:&quot;0x</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getFilterLogs - addr_1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getFilterLogs&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_uninstallFilter - addr_1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_uninstallFilter&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="1639967077">&quot;result&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getLogs - addr_2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getLogs&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;, &quot;address&quot;:[&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;, &quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;]}], &quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">array of addresses</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_newFilter - addr_2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_newFilter&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;, &quot;address&quot;:[&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;, &quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;]}],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract new filter id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">newFilterId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="-501368013">&quot;result&quot;:&quot;0x</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getFilterLogs - addr_2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getFilterLogs&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_uninstallFilter - addr_2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_uninstallFilter&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="1639967077">&quot;result&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getLogs - topic_1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getLogs&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;, &quot;topics&quot;:[]}], &quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">match any topic</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_newFilter - topic_1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_newFilter&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;, &quot;topics&quot;:[]}],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract new filter id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">newFilterId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="-501368013">&quot;result&quot;:&quot;0x</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getFilterLogs - topic_1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getFilterLogs&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_uninstallFilter - topic_1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_uninstallFilter&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="1639967077">&quot;result&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getLogs - topic_2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getLogs&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;, &quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;]}], &quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">match topic in first position</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_newFilter - topic_2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_newFilter&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;, &quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;]}],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract new filter id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">newFilterId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="-501368013">&quot;result&quot;:&quot;0x</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getFilterLogs - topic_2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getFilterLogs&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_uninstallFilter - topic_2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_uninstallFilter&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="1639967077">&quot;result&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getLogs - topic_3" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getLogs&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;, &quot;topics&quot;:[null,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;]}], &quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">match topic in second position</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_newFilter - topic_3" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_newFilter&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;, &quot;topics&quot;:[null,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;]}],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract new filter id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">newFilterId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="-501368013">&quot;result&quot;:&quot;0x</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getFilterLogs - topic_3" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getFilterLogs&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_uninstallFilter - topic_3" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_uninstallFilter&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="1639967077">&quot;result&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getLogs - topic_4" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getLogs&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;, &quot;topics&quot;:[null,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;, &quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;]}], &quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">match topic in second and third position</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_newFilter - topic_4" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_newFilter&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;, &quot;topics&quot;:[null,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;, &quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;]}],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract new filter id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">newFilterId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="-501368013">&quot;result&quot;:&quot;0x</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getFilterLogs - topic_4" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getFilterLogs&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_uninstallFilter - topic_4" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_uninstallFilter&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="1639967077">&quot;result&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getLogs - topic_5" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getLogs&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;, &quot;topics&quot;:[[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;, &quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;]]}], &quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">match topic in first position with OR cond</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_newFilter - topic_5" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_newFilter&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;, &quot;topics&quot;:[[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;, &quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;]]}],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract new filter id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">newFilterId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="-501368013">&quot;result&quot;:&quot;0x</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getFilterLogs - topic_5" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getFilterLogs&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c9bdeed33cd01541e1eed10f90519d2c06fe3feb0000000000000000000000000000000000003bdfc1b81409962399a4f0000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x1&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000c42c30ac6cc15fac9bd938618bcaa1a1fae8501d0000000000000000000000000000000000000010928824efac61b861e8000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x0&quot;,&quot;transactionHash&quot;:&quot;0x172794dc3ee343c1fc7cdf5170e2aa61372a3d947fe042b106286f99454ab6ff&quot;,&quot;logIndex&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;,&quot;topics&quot;:[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;],&quot;data&quot;:&quot;0x000000000000000000000000b12bfca5a55806aaf64e99521918a4bf0fc40802000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000713e400b032b89db9f68105e501ff13260398490&quot;,&quot;removed&quot;:false},{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_uninstallFilter - topic_5" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_uninstallFilter&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="1639967077">&quot;result&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getLogs - topic_6" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getLogs&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;, &quot;topics&quot;:[[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;, &quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;], &quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;]}], &quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">match 2 topics in first position with OR cond and a topic in second position</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_newFilter - topic_6" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_newFilter&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;, &quot;topics&quot;:[[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;, &quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;], &quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;]}],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract new filter id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">newFilterId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="-501368013">&quot;result&quot;:&quot;0x</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getFilterLogs - topic_6" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getFilterLogs&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_uninstallFilter - topic_6" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_uninstallFilter&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="1639967077">&quot;result&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getLogs - topic_7" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getLogs&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;, &quot;topics&quot;:[[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;, &quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;], &quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c55&quot;]}], &quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">match 2 topics in first position with OR cond and not match a topic in second position</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_newFilter - topic_7" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_newFilter&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;, &quot;topics&quot;:[[&quot;0xc37a77b91cc3fc2d0e4b43fd2f347ec67adda10e39215de4742836cc3e42c97a&quot;, &quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;], &quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c55&quot;]}],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract new filter id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">newFilterId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="-501368013">&quot;result&quot;:&quot;0x</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getFilterLogs - topic_7" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getFilterLogs&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_uninstallFilter - topic_7" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_uninstallFilter&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="1639967077">&quot;result&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getLogs - topic_8" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getLogs&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;, &quot;address&quot;: &quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;, &quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;]}], &quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">match topic in first position but do not match address</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_newFilter - topic_8" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_newFilter&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;, &quot;address&quot;: &quot;0xe381bc8c7c342b568f476e6b39698c2edf468f5f&quot;, &quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;]}],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract new filter id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">newFilterId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="-501368013">&quot;result&quot;:&quot;0x</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getFilterLogs - topic_8" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getFilterLogs&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_uninstallFilter - topic_8" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_uninstallFilter&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="1639967077">&quot;result&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getLogs - topic_9" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getLogs&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;, &quot;address&quot;: &quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;, &quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;]}], &quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">match topic in first position and match address</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_newFilter - topic_9" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_newFilter&quot;,&quot;params&quot;:[{&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;, &quot;address&quot;: &quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;, &quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;]}],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract new filter id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">newFilterId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="-501368013">&quot;result&quot;:&quot;0x</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getFilterLogs - topic_9" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getFilterLogs&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def expected = &quot;&quot;&quot;
{
	&quot;id&quot;:${request_counter}, 
	&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;, 
	&quot;result&quot;:[{&quot;blockNumber&quot;:&quot;0x4d71d93&quot;,&quot;blockHash&quot;:&quot;0x0a007345d45f931532063ff5bb0d267b5af940e8ca2ccb0cdc81e37664c82ba4&quot;,&quot;transactionIndex&quot;:&quot;0x1&quot;,&quot;transactionHash&quot;:&quot;0xa341c7b2f7f27f68f5b7bf6c8ca008f9af7e80dc3ee03ced45a28deb61b5bfd4&quot;,&quot;logIndex&quot;:&quot;0x0&quot;,&quot;address&quot;:&quot;0xc6e5185438e1730959c1ef3551059a3fec744e90&quot;,&quot;topics&quot;:[&quot;0x2d452398cb8bb9e5cdadeaabfe0a5d66bf83abdf317ed5633a64528f5bee7458&quot;,&quot;0x000000000000000000000000ad5a2437ff55ed7a8cad3b797b3ec7c5a19b1c54&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000005f5e100&quot;,&quot;0x000000000000000000000000b3072378821cdafac340bf18a0fbf15c72feb83b&quot;],&quot;data&quot;:&quot;${zero_data}&quot;,&quot;removed&quot;:false}]
}
&quot;&quot;&quot;

log.info(expected)

def actual = prev.getResponseDataAsString()

log.info(actual)

org.skyscreamer.jsonassert.JSONAssert.assertEquals(expected, actual, false)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_uninstallFilter - topic_9" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_uninstallFilter&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="1639967077">&quot;result&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_newBlockFilter - blockfilter_1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_newBlockFilter&quot;,&quot;params&quot;:[],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract new filter id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">newFilterId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="-501368013">&quot;result&quot;:&quot;0x</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="? eth_getFilterLogs - blockfilter_1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getFilterLogs&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">call getFilterLogs with blockfilter id</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.error.code</stringProp>
              <stringProp name="EXPECTED_VALUE">-32000</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getFilterChanges - blockfilter_1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getFilterChanges&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">\[(\&quot;0x\w{64}\&quot;,){0,5}(\&quot;0x\w{64}\&quot;)\]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
              <stringProp name="TestPlan.comments">match array of block hashes, min 1, max 6 hashes</stringProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">6000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract block filter changes" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">blockFilterChanges1</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_getFilterChanges - blockfilter_1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_getFilterChanges&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract block filter changes" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">blockFilterChanges2</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.result</stringProp>
              <stringProp name="EXPECTED_VALUE">\[(\&quot;0x\w{64}\&quot;,){3,5}(\&quot;0x\w{64}\&quot;)\]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
              <stringProp name="TestPlan.comments">match array of block hashes, min 4, max 6 hashes</stringProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="compare blockFilterChanges" enabled="true">
              <stringProp name="TestPlan.comments">block filter changes should not be equal</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">bfc1=vars.get(&quot;blockFilterChanges1&quot;)
bfc2=vars.get(&quot;blockFilterChanges2&quot;)

if (bfc1 == null || bfc2 == null) {
	prev.setSuccessful(false)
}

if (!bfc1.equalsIgnoreCase(bfc2)) {
	prev.setSuccessful(false)
}

prev.setSuccessful(true)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_uninstallFilter - blockfilter_1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_uninstallFilter&quot;,&quot;params&quot;:[&quot;${newFilterId}&quot;],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="1639967077">&quot;result&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eth_newPendingTransactionFilter" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;jsonrpc&quot;:&quot;${json_rpc_version}&quot;,&quot;method&quot;:&quot;eth_newPendingTransactionFilter&quot;,&quot;params&quot;:[],&quot;id&quot;:${request_counter}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Msg Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-586548451">&quot;id&quot;:${request_counter}</stringProp>
                <stringProp name="-501368013">&quot;result&quot;:&quot;0x</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <com.github.johrstrom.listener.PrometheusListener guiclass="com.github.johrstrom.listener.gui.PrometheusListenerGui" testclass="com.github.johrstrom.listener.PrometheusListener" testname="Prometheus Listener" enabled="true">
            <collectionProp name="prometheus.collector_definitions">
              <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
                <stringProp name="collector.help">default help string</stringProp>
                <stringProp name="collector.metric_name">${test_name}_success_total</stringProp>
                <stringProp name="collector.type">COUNTER</stringProp>
                <collectionProp name="collector.labels">
                  <stringProp name="102727412">label</stringProp>
                </collectionProp>
                <stringProp name="collector.quantiles_or_buckets"></stringProp>
                <stringProp name="listener.collector.listen_to">samples</stringProp>
                <stringProp name="listener.collector.measuring">SuccessTotal</stringProp>
              </elementProp>
              <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
                <stringProp name="collector.help">default help string</stringProp>
                <stringProp name="collector.metric_name">${test_name}_count_total</stringProp>
                <stringProp name="collector.type">COUNTER</stringProp>
                <collectionProp name="collector.labels">
                  <stringProp name="102727412">label</stringProp>
                </collectionProp>
                <stringProp name="collector.quantiles_or_buckets"></stringProp>
                <stringProp name="listener.collector.measuring">CountTotal</stringProp>
              </elementProp>
              <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
                <stringProp name="collector.help">default help string</stringProp>
                <stringProp name="collector.metric_name">${test_name}_failure_total</stringProp>
                <stringProp name="collector.type">COUNTER</stringProp>
                <collectionProp name="collector.labels">
                  <stringProp name="102727412">label</stringProp>
                </collectionProp>
                <stringProp name="collector.quantiles_or_buckets"></stringProp>
                <stringProp name="listener.collector.measuring">FailureTotal</stringProp>
              </elementProp>
              <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
                <stringProp name="collector.help">default help string</stringProp>
                <stringProp name="collector.metric_name">${test_name}_success_ratio</stringProp>
                <stringProp name="collector.type">SUCCESS_RATIO</stringProp>
                <collectionProp name="collector.labels"/>
                <stringProp name="collector.quantiles_or_buckets"></stringProp>
                <stringProp name="listener.collector.measuring">SuccessRatio</stringProp>
              </elementProp>
              <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
                <stringProp name="collector.help">default help string</stringProp>
                <stringProp name="collector.metric_name">${test_name}_response_time</stringProp>
                <stringProp name="collector.type">SUMMARY</stringProp>
                <collectionProp name="collector.labels">
                  <stringProp name="102727412">label</stringProp>
                </collectionProp>
                <stringProp name="collector.quantiles_or_buckets"></stringProp>
                <stringProp name="listener.collector.measuring">ResponseTime</stringProp>
              </elementProp>
            </collectionProp>
          </com.github.johrstrom.listener.PrometheusListener>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="ResponseData Appender on Failure" enabled="true">
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="script">def responseData = prev.getResponseDataAsString()

sampleResult.getAssertionResults().each { assertionResult -&gt;       
    {
    	def tmp = assertionResult.getFailureMessage()
    	assertionResult.setFailureMessage(tmp + &quot;\nResponse Data: &quot; +responseData)
    }
}</stringProp>
        <stringProp name="scriptLanguage">groovy</stringProp>
      </JSR223Listener>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
